name: Generate javadoc

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Setting Implementation
        run: |
          sed -e "40i implementation group: 'org.processing', name: 'core', version: '3.3.7'" build.gradle
          cat build.gradle
      - name: Build with Gradle
        run: ./gradlew javadoc
      - name: Delete Implementation
        run: |
          sed -e "40d" build.gradle
          cat build.gradle
      - name: Test
        run: ./gradlew test
      - name: Count changes
        id: changes
        run: |
          git add -N . # 新規ファイルを含める
          echo "::set-output name=count::$(git diff --name-only | wc -l)"
      - name: commit & push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update javadoc"
          git push
        if: steps.changes.outputs.count > 0
      - name: Check Version
        id: checks
        run: |
          echo "::set-output name=releaseBranchName::release/v$(cat gradle.properties | cut -d '=' -f 2)"
          echo "Version is ${{ steps.checks.outputs.releaseBranchName }}"
          echo "::set-output name=isNewVersion::$(git branch -a | grep ${{ steps.checks.outputs.releaseBranchName }} | wc -l)"
          echo "isNewVersion is ${{ steps.checks.outputs.isNewVersion }}"
      - name: Release New Version
        run: |
          git checkout -b ${{ steps.checks.outputs.releaseBranchName }}
          git push origin ${{ steps.checks.outputs.releaseBranchName }}
          git checkout -
        if: steps.checks.outputs.isNewVersion == 0